{% if GIT_DESCRIBE_NUMBER > '0' %}
{% set GIT_VERSION = GIT_DESCRIBE_TAG[1:] + '.post' + GIT_DESCRIBE_NUMBER %}
{% else %}
{% set GIT_VERSION = GIT_DESCRIBE_TAG[1:] %}
{% endif %}
{% set PKG_NAME = 'dropbot' %}
{% set LIB_NAME = 'Dropbot' %}
{% set MODULE_NAME = PKG_NAME.replace('-', '_') %}
{% set PLATFORMIO_ENVS = 'teensy31'.split(' ') %}
package:
  name: {{ PKG_NAME }}
  version: {{ GIT_VERSION }}

build:
  # If this is a new build for the same version, increment the build number.
  # If you do not include this key, it defaults to 0.
  number: 0
  noarch: python
  entry_points:
    - dropbot-self-test = dropbot.bin.self_test:main
    - dropbot-upload = dropbot.bin.upload:upload
  script:
    # Copy Arduino library to Conda include directory and generate Arduino `library.properties` file
    - python file_handler.py {{ SRC_DIR }} {{ PREFIX }} {{ PKG_NAME }}
    # Install source directory as Python package.
    - python setup.py install --single-version-externally-managed --record record.txt

requirements:
  build:
        - python {{ python }}
        - pint
        - numpy
        - pandas
        - pandoc
        - pypandoc
        - jinja2
        - pytables
        - protobuf 5.29.*
        - tabulate
        - aiosignal
        - matplotlib-base
        - platformio
        - beautifulsoup4
        - nadamq
        - debounce
        - base-node >=0.16.4
        - svg-model
        - json-tricks
        - serial-device
        - arduino-rpc
        - base-node-rpc
        - teensy-minimal-rpc
        - dropbot-headers
        - path-helpers
        - conda-helpers
        - nanopb-helpers
        - asyncio-helpers
        - logging-helpers
        - platformio-helpers
        - hv-switching-board
        - pytest

#     Split into `noarch` C++ header package and platform-specific Python
#     package.
outputs:
  - name: {{ PKG_NAME }}-dev
    noarch: generic
    files:
      - share
    requirements:
      run:
        - dropbot-headers
        - base-node-dev
        - arduino-rpc-dev
        - base-node-rpc-dev
        - teensy-minimal-rpc-dev
  - name: {{ PKG_NAME }}
    files:
      - {{ SP_DIR }}/{{ MODULE_NAME }}
    requirements:
      run:
        - python >=3.6
        - {{ pin_subpackage(PKG_NAME + '-dev', max_pin='x.x') }}
        - pint
        - numpy
        - pandas
        - pandoc
        - pypandoc
        - jinja2
        - pytables
        - protobuf 5.29.*
        - tabulate
        - aiosignal
        - matplotlib-base
        - platformio
        - beautifulsoup4
        - nadamq
        - debounce
        - base-node >=0.16.4
        - svg-model
        - json-tricks
        - serial-device
        - arduino-rpc
        - base-node-rpc
        - teensy-minimal-rpc
        - path-helpers
        - conda-helpers
        - nanopb-helpers
        - asyncio-helpers
        - logging-helpers
        - platformio-helpers
        - hv-switching-board
        - pytest

    test:
      imports:
        # .. versionchanged:: 1.37.2
        - {{ MODULE_NAME }}
        - {{ MODULE_NAME + '._version' }}
        - {{ MODULE_NAME + '.bin' }}
        - {{ MODULE_NAME + '.config' }}
        - {{ MODULE_NAME + '.hardware_test' }}
        - {{ MODULE_NAME + '.metadata' }}
        - {{ MODULE_NAME + '.proxy' }}
        - {{ MODULE_NAME + '.state' }}

about:
  home: https://github.com/sci-bots/{{ PKG_NAME }}
  license: MIT
  summary: Dropbot API

# source will be downloaded prior to filling in jinja templates
# Example assumes that this folder has setup.py in it
source:
#  git_url: ../
  path: ..
